---
title: "Latent Growth Curve Model"
---

# Setting up

## Loading packages

```{r packages}
#| code-fold: true
#| code-summary: "Check out my packages"
#| message: false
#| warning: false

library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
library(ggplot2)
library(patchwork)

library(lavaan)
```

## Loading functions

```{r functions}
#| code-fold: true
#| code-summary: "Check out my functions"

extract_years <- function(data, years, impute = FALSE, cog_total = FALSE, absorbing = FALSE) {
  # Extracts cognitive function data for specified years from a dataset.
  # Converts numeric cognitive status codes (1, 2, 3) into descriptive labels
  # ("Normal Cognition", "MCI", "Dementia") for easier interpretation.
  # Arguments:
  #   - data: The input dataset containing cognitive function data.
  #   - years: A vector of years for which data should be extracted.
  # Returns:
  #   - A dataset with ID and cognitive status columns for the specified years.
  
  # Create dynamic column names based on the years provided
  cogfunction_cols <- paste0("cogfunction", years)
  cogtotal_cols    <- paste0("cogtot27_imp", years)
  
  if(cog_total == FALSE) {
    data <- data |>
      # Select only the ID column and cognitive function columns for the specified years
      select(ID, any_of(cogfunction_cols)) |>
      mutate(across(!c(ID), ~ case_when(
        .x == 1 ~ "Normal Cognition",
        .x == 2 ~ "MCI",
        .x == 3 ~ "Dementia",
        TRUE ~ NA_character_  # To handle missing/other cases
      )))
  } else {
    data <- data |>
      # Select only the ID column and cognitive function columns for the specified years
      select(ID, any_of(cogtotal_cols)) |>
      rename_with( .cols = !ID, .fn = ~ stringr::str_replace(
        string = .x,
        pattern = "cogtot27_imp", 
        replacement = "cog_score_"))
  }
  
  if(impute == TRUE){
    data <- data |>
      tidyr::pivot_longer(
        cols = !ID,
        names_to = "Wave",
        values_to = "Status") |>
      group_by(ID) |>
      tidyr::fill(Status, .direction = "down") |>
      ungroup() |>
      tidyr::pivot_wider(names_from = "Wave", values_from = "Status")
  }
  
  if(cog_total == FALSE & absorbing == TRUE) {
    data <- data |>
      tidyr::pivot_longer(
        cols = !ID,
        names_to = "Wave",
        values_to = "Status") |>
      group_by(ID) |>
      mutate(Status = ifelse(cumany(Status == "Dementia" & !is.na(Status)), "Dementia", Status)) |>
      ungroup() |>
      tidyr::pivot_wider(names_from = "Wave", values_from = "Status")
  } else if(cog_total == TRUE & absorbing == TRUE) {
    data <- data |>
      tidyr::pivot_longer(cols = !ID, names_to = "Wave", values_to = "Score") |>
      group_by(ID) |>
      mutate(Score = ifelse(cumany(Score <= 6 & !is.na(Score)), pmin(Score, 6), Score)) |>
      pivot_wider(names_from = Wave, values_from = Score)
  }
  
  return(data)
}
```

## Loading data

```{r}
data <- read.csv(here::here("analysis/data/data.csv"))
```

# Data processing

```{r}
cog_totals <- data |> 
  extract_years(
    years = seq(2016, 2022, by = 2),
    cog_total = TRUE,
    impute = TRUE,
    absorbing = TRUE) |>
  na.omit()

head(cog_totals)
```

```{r}
cols <- c(
  "ID", "Gender", "Age", "Education_tri",
  paste0("Total_dep_", seq(2016, 2022, by = 2)),
  "Total_p")

data_final <- cog_totals |>
  inner_join(data[, cols], by = "ID") |>
  pivot_longer(
    cols = starts_with("cog_score"),
    names_to = "Wave",
    values_to = "Score",
    names_prefix = "cog_score_") |>
  mutate(
    Wave = factor(Wave, levels = c(2016, 2018, 2020, 2022)),
    Gender = factor(Gender, levels = c(0, 1)),
    GED = factor(ifelse(Education_tri == 1, 1, 0)),
    FE = factor(ifelse(Education_tri == 2, 1, 0)),
    Education_tri = factor(Education_tri, levels = c(0, 1, 2)),
    ) |>
  relocate(Wave, .after = ID) |>
  relocate(Score, .after = Wave) |>
  select(!starts_with(paste0("Total_dep_20", 18:22))) |>
  filter(!is.na(Total_p)) |>
  ungroup()

head(data_final)
```

```{r}
observed_trajectories <- data_final |>
  ggplot(aes(x = Wave, y = Score, group = ID)) +
  geom_line(alpha = 0.25) +
  stat_summary(
    aes(group = 1),
    fun = mean,
    geom = "line",
    linewidth = 1.5,
    color = "red"
  ) +
  labs(title = "Observed trajectories of cognitive function",
       subtitle = "Cognitive function scores across waves",
       x = "Year", y = "Cognitive Score") +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, colour = "grey11", face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12, colour = "grey11", face = "bold"),
    axis.title = element_text(size = 10, colour = "grey11", face = "bold")
  )

observed_trajectories
```



